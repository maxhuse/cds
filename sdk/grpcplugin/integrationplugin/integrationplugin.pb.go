// Code generated by protoc-gen-go. DO NOT EDIT.
// source: integrationplugin.proto

package integrationplugin

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type IntegrationPluginManifest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version              string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Description          string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Author               string   `protobuf:"bytes,4,opt,name=author,proto3" json:"author,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IntegrationPluginManifest) Reset()         { *m = IntegrationPluginManifest{} }
func (m *IntegrationPluginManifest) String() string { return proto.CompactTextString(m) }
func (*IntegrationPluginManifest) ProtoMessage()    {}
func (*IntegrationPluginManifest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad20155c873eed76, []int{0}
}

func (m *IntegrationPluginManifest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IntegrationPluginManifest.Unmarshal(m, b)
}
func (m *IntegrationPluginManifest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IntegrationPluginManifest.Marshal(b, m, deterministic)
}
func (m *IntegrationPluginManifest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IntegrationPluginManifest.Merge(m, src)
}
func (m *IntegrationPluginManifest) XXX_Size() int {
	return xxx_messageInfo_IntegrationPluginManifest.Size(m)
}
func (m *IntegrationPluginManifest) XXX_DiscardUnknown() {
	xxx_messageInfo_IntegrationPluginManifest.DiscardUnknown(m)
}

var xxx_messageInfo_IntegrationPluginManifest proto.InternalMessageInfo

func (m *IntegrationPluginManifest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *IntegrationPluginManifest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *IntegrationPluginManifest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *IntegrationPluginManifest) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

type RunQuery struct {
	Options              map[string]string `protobuf:"bytes,1,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RunQuery) Reset()         { *m = RunQuery{} }
func (m *RunQuery) String() string { return proto.CompactTextString(m) }
func (*RunQuery) ProtoMessage()    {}
func (*RunQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad20155c873eed76, []int{1}
}

func (m *RunQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunQuery.Unmarshal(m, b)
}
func (m *RunQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunQuery.Marshal(b, m, deterministic)
}
func (m *RunQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunQuery.Merge(m, src)
}
func (m *RunQuery) XXX_Size() int {
	return xxx_messageInfo_RunQuery.Size(m)
}
func (m *RunQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_RunQuery.DiscardUnknown(m)
}

var xxx_messageInfo_RunQuery proto.InternalMessageInfo

func (m *RunQuery) GetOptions() map[string]string {
	if m != nil {
		return m.Options
	}
	return nil
}

type RunResult struct {
	Status               string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Details              string   `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunResult) Reset()         { *m = RunResult{} }
func (m *RunResult) String() string { return proto.CompactTextString(m) }
func (*RunResult) ProtoMessage()    {}
func (*RunResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad20155c873eed76, []int{2}
}

func (m *RunResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunResult.Unmarshal(m, b)
}
func (m *RunResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunResult.Marshal(b, m, deterministic)
}
func (m *RunResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunResult.Merge(m, src)
}
func (m *RunResult) XXX_Size() int {
	return xxx_messageInfo_RunResult.Size(m)
}
func (m *RunResult) XXX_DiscardUnknown() {
	xxx_messageInfo_RunResult.DiscardUnknown(m)
}

var xxx_messageInfo_RunResult proto.InternalMessageInfo

func (m *RunResult) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *RunResult) GetDetails() string {
	if m != nil {
		return m.Details
	}
	return ""
}

func init() {
	proto.RegisterType((*IntegrationPluginManifest)(nil), "integrationplugin.IntegrationPluginManifest")
	proto.RegisterType((*RunQuery)(nil), "integrationplugin.RunQuery")
	proto.RegisterMapType((map[string]string)(nil), "integrationplugin.RunQuery.OptionsEntry")
	proto.RegisterType((*RunResult)(nil), "integrationplugin.RunResult")
}

func init() {
	proto.RegisterFile("integrationplugin.proto", fileDescriptor_ad20155c873eed76)
}

var fileDescriptor_ad20155c873eed76 = []byte{
	// 376 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0x3d, 0x6f, 0xe2, 0x40,
	0x10, 0x65, 0x31, 0xc7, 0xc7, 0x70, 0xc5, 0xb1, 0x3a, 0x71, 0x3e, 0x73, 0x05, 0x72, 0x45, 0x81,
	0x16, 0x89, 0x6b, 0x10, 0xd2, 0x35, 0x96, 0x28, 0xae, 0x88, 0x42, 0x9c, 0x2e, 0xa9, 0x8c, 0xbd,
	0x18, 0x0b, 0xb3, 0x6b, 0xed, 0x07, 0x92, 0xeb, 0x74, 0xf9, 0x9f, 0xf9, 0x1f, 0x91, 0xd7, 0x76,
	0x82, 0x64, 0x48, 0xb7, 0x6f, 0xde, 0x9b, 0x9d, 0x7d, 0x6f, 0x16, 0x7e, 0x25, 0x4c, 0xd1, 0x58,
	0x04, 0x2a, 0xe1, 0x2c, 0x4b, 0x75, 0x9c, 0x30, 0x92, 0x09, 0xae, 0x38, 0x1e, 0x35, 0x08, 0x67,
	0x12, 0x73, 0x1e, 0xa7, 0x74, 0x61, 0x04, 0x3b, 0xbd, 0x5f, 0xd0, 0x53, 0xa6, 0xf2, 0x52, 0xef,
	0xbe, 0x20, 0xf8, 0xfd, 0xff, 0xb3, 0x65, 0x6b, 0x5a, 0xee, 0x02, 0x96, 0xec, 0xa9, 0x54, 0x18,
	0x43, 0x87, 0x05, 0x27, 0x6a, 0xa3, 0x29, 0x9a, 0x0d, 0x7c, 0x73, 0xc6, 0x36, 0xf4, 0xce, 0x54,
	0xc8, 0x84, 0x33, 0xbb, 0x6d, 0xca, 0x35, 0xc4, 0x53, 0x18, 0x46, 0x54, 0x86, 0x22, 0xc9, 0x8a,
	0xab, 0x6c, 0xcb, 0xb0, 0x97, 0x25, 0x3c, 0x86, 0x6e, 0xa0, 0xd5, 0x81, 0x0b, 0xbb, 0x63, 0xc8,
	0x0a, 0xb9, 0xaf, 0x08, 0xfa, 0xbe, 0x66, 0x0f, 0x9a, 0x8a, 0x1c, 0x7b, 0xd0, 0xe3, 0x46, 0x2e,
	0x6d, 0x34, 0xb5, 0x66, 0xc3, 0xe5, 0x8c, 0x34, 0xdd, 0xd6, 0x6a, 0x72, 0x5f, 0x4a, 0x37, 0x4c,
	0x89, 0xdc, 0xaf, 0x1b, 0x9d, 0x35, 0x7c, 0xbf, 0x24, 0xf0, 0x0f, 0xb0, 0x8e, 0x34, 0xaf, 0x7c,
	0x14, 0x47, 0xfc, 0x13, 0xbe, 0x9d, 0x83, 0x54, 0xd3, 0xca, 0x44, 0x09, 0xd6, 0xed, 0x15, 0x72,
	0xff, 0xc1, 0xc0, 0xd7, 0xcc, 0xa7, 0x52, 0xa7, 0xaa, 0x78, 0xb1, 0x54, 0x81, 0xd2, 0xb2, 0xea,
	0xad, 0x50, 0x91, 0x42, 0x44, 0x55, 0x90, 0xa4, 0xb2, 0x4e, 0xa1, 0x82, 0xcb, 0x37, 0x04, 0xa3,
	0x46, 0xa2, 0xd8, 0x87, 0xfe, 0x47, 0xaa, 0x63, 0x52, 0x6e, 0x84, 0xd4, 0x1b, 0x21, 0x9b, 0x62,
	0x23, 0xce, 0xfc, 0x8a, 0xcf, 0x9b, 0xbb, 0x71, 0x5b, 0xd8, 0x03, 0xcb, 0xd7, 0x0c, 0x4f, 0xbe,
	0x88, 0xc7, 0xf9, 0x73, 0x9d, 0x2c, 0xdd, 0xb9, 0x2d, 0xbc, 0x82, 0xce, 0xa3, 0xe2, 0xd9, 0xcd,
	0x37, 0xdd, 0xa8, 0xbb, 0x2d, 0xef, 0x19, 0xe6, 0x21, 0x3f, 0x11, 0x7e, 0x3e, 0x90, 0x30, 0x92,
	0x44, 0x46, 0x47, 0x12, 0x8b, 0x2c, 0xac, 0x66, 0x34, 0xa6, 0x7a, 0xe3, 0x86, 0x95, 0x6d, 0x71,
	0xe5, 0x16, 0x3d, 0x35, 0xff, 0xec, 0xae, 0x6b, 0xc6, 0xfd, 0x7d, 0x0f, 0x00, 0x00, 0xff, 0xff,
	0x86, 0x00, 0x28, 0x72, 0xe8, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// IntegrationPluginClient is the client API for IntegrationPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IntegrationPluginClient interface {
	Manifest(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*IntegrationPluginManifest, error)
	Run(ctx context.Context, in *RunQuery, opts ...grpc.CallOption) (*RunResult, error)
	Stop(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type integrationPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewIntegrationPluginClient(cc grpc.ClientConnInterface) IntegrationPluginClient {
	return &integrationPluginClient{cc}
}

func (c *integrationPluginClient) Manifest(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*IntegrationPluginManifest, error) {
	out := new(IntegrationPluginManifest)
	err := c.cc.Invoke(ctx, "/integrationplugin.IntegrationPlugin/Manifest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationPluginClient) Run(ctx context.Context, in *RunQuery, opts ...grpc.CallOption) (*RunResult, error) {
	out := new(RunResult)
	err := c.cc.Invoke(ctx, "/integrationplugin.IntegrationPlugin/Run", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationPluginClient) Stop(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/integrationplugin.IntegrationPlugin/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IntegrationPluginServer is the server API for IntegrationPlugin service.
type IntegrationPluginServer interface {
	Manifest(context.Context, *empty.Empty) (*IntegrationPluginManifest, error)
	Run(context.Context, *RunQuery) (*RunResult, error)
	Stop(context.Context, *empty.Empty) (*empty.Empty, error)
}

// UnimplementedIntegrationPluginServer can be embedded to have forward compatible implementations.
type UnimplementedIntegrationPluginServer struct {
}

func (*UnimplementedIntegrationPluginServer) Manifest(ctx context.Context, req *empty.Empty) (*IntegrationPluginManifest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Manifest not implemented")
}
func (*UnimplementedIntegrationPluginServer) Run(ctx context.Context, req *RunQuery) (*RunResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (*UnimplementedIntegrationPluginServer) Stop(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}

func RegisterIntegrationPluginServer(s *grpc.Server, srv IntegrationPluginServer) {
	s.RegisterService(&_IntegrationPlugin_serviceDesc, srv)
}

func _IntegrationPlugin_Manifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationPluginServer).Manifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integrationplugin.IntegrationPlugin/Manifest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationPluginServer).Manifest(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationPlugin_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationPluginServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integrationplugin.IntegrationPlugin/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationPluginServer).Run(ctx, req.(*RunQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationPlugin_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationPluginServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integrationplugin.IntegrationPlugin/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationPluginServer).Stop(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _IntegrationPlugin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "integrationplugin.IntegrationPlugin",
	HandlerType: (*IntegrationPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Manifest",
			Handler:    _IntegrationPlugin_Manifest_Handler,
		},
		{
			MethodName: "Run",
			Handler:    _IntegrationPlugin_Run_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _IntegrationPlugin_Stop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "integrationplugin.proto",
}
